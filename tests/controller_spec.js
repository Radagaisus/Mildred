// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty;

  describe('Controller', function() {
    var controller;
    controller = null;
    beforeEach(function() {
      return controller = new Mildred.Controller();
    });
    afterEach(function() {
      controller.dispose();
      return Backbone.off('router:route');
    });
    it('should mixin a Backbone.Events', function() {
      var name, value, _ref, _results;
      _ref = Backbone.Events;
      _results = [];
      for (name in _ref) {
        if (!__hasProp.call(_ref, name)) continue;
        value = _ref[name];
        _results.push(expect(controller[name]).to.be(Backbone.Events[name]));
      }
      return _results;
    });
    it('should be extendable', function() {
      var DerivedController, derivedController;
      expect(Mildred.Controller.extend).to.be.a('function');
      DerivedController = Mildred.Controller.extend();
      derivedController = new DerivedController();
      expect(derivedController).to.be.a(Mildred.Controller);
      return derivedController.dispose();
    });
    it('should redirect to a URL', function() {
      var routerRoute, url;
      expect(controller.redirectTo).to.be.a('function');
      routerRoute = sinon.spy();
      Backbone.on('router:route', routerRoute);
      url = 'redirect-target/123';
      controller.redirectTo(url);
      expect(controller.redirected).to.be(true);
      return expect(routerRoute).was.calledWith(url);
    });
    it('should redirect to a URL with routing options', function() {
      var options, routerRoute, url;
      routerRoute = sinon.spy();
      Backbone.on('router:route', routerRoute);
      url = 'redirect-target/123';
      options = {
        replace: true
      };
      controller.redirectTo(url, options);
      expect(controller.redirected).to.be(true);
      return expect(routerRoute).was.calledWith(url, options);
    });
    it('should redirect to a named route', function() {
      var name, params, pathDesc, routerRoute;
      routerRoute = sinon.spy();
      Backbone.on('router:route', routerRoute);
      name = 'params';
      params = {
        one: '21'
      };
      pathDesc = {
        name: name,
        params: params
      };
      controller.redirectTo(pathDesc);
      expect(controller.redirected).to.be(true);
      return expect(routerRoute).was.calledWith(pathDesc);
    });
    it('should redirect to a named route with options', function() {
      var name, options, params, pathDesc, routerRoute;
      routerRoute = sinon.spy();
      Backbone.on('router:route', routerRoute);
      name = 'params';
      params = {
        one: '21'
      };
      pathDesc = {
        name: name,
        params: params
      };
      options = {
        replace: true
      };
      controller.redirectTo(pathDesc, options);
      expect(controller.redirected).to.be(true);
      return expect(routerRoute).was.calledWith(pathDesc, options);
    });
    it('should adjust page title', function() {
      var spy;
      spy = sinon.spy();
      Backbone.on('adjustTitle', spy);
      controller.adjustTitle('meh');
      expect(spy).was.calledOnce();
      return expect(spy).was.calledWith('meh');
    });
    return describe('Disposal', function() {
      it('should dispose itself correctly', function() {
        expect(controller.dispose).to.be.a('function');
        controller.dispose();
        return expect(controller.disposed).to.be(true);
      });
      it('should dispose disposable properties', function() {
        var model, view;
        model = controller.model = new Mildred.Model();
        view = controller.view = new Mildred.View({
          model: model
        });
        controller.dispose();
        expect(controller).not.to.have.own.property('model');
        expect(controller).not.to.have.own.property('view');
        expect(model.disposed).to.be(true);
        return expect(view.disposed).to.be(true);
      });
      it('should unsubscribe from Pub/Sub events', function() {
        var pubSubSpy;
        pubSubSpy = sinon.spy();
        controller.on('foo', pubSubSpy);
        controller.dispose();
        controller.trigger('foo');
        return expect(pubSubSpy).was.notCalled();
      });
      return it('should unsubscribe from other events', function() {
        var model, spy;
        spy = sinon.spy();
        model = new Mildred.Model;
        controller.listenTo(model, 'foo', spy);
        controller.dispose();
        model.trigger('foo');
        return expect(spy).was.notCalled();
      });
    });
  });

}).call(this);
