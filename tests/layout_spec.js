// Generated by CoffeeScript 1.4.0
(function() {

  describe('Layout', function() {
    var createLink, expectWasNotRouted, expectWasRouted, layout, router, testController;
    layout = testController = router = null;
    createLink = function(attributes) {
      var $link, div, link;
      attributes = attributes ? _.clone(attributes) : {};
      if (attributes.href != null) {
        div = document.createElement('div');
        div.innerHTML = "<a href='" + attributes.href + "'>Hello World</a>";
        link = div.firstChild;
        attributes = _.omit(attributes, 'href');
        $link = $(link);
      } else {
        $link = $(document.createElement('a'));
      }
      return $link.attr(attributes);
    };
    expectWasRouted = function(linkAttributes) {
      var passedPath, stub;
      stub = sinon.spy();
      Backbone.on('router:route', stub);
      createLink(linkAttributes).appendTo(document.body).click().remove();
      expect(stub).was.calledOnce();
      passedPath = stub.firstCall.args[0];
      expect(passedPath).to.eql({
        url: linkAttributes.href
      });
      Backbone.off('!router:route', stub);
      return stub;
    };
    expectWasNotRouted = function(linkAttributes) {
      var spy;
      spy = sinon.spy();
      Backbone.on('router:route', spy);
      createLink(linkAttributes).appendTo(document.body).click().remove();
      expect(spy).was.notCalled();
      Backbone.off('!router:route', spy);
      return spy;
    };
    beforeEach(function() {
      layout = new Mildred.Layout({
        title: 'Test Site Title'
      });
      testController = new Mildred.Controller();
      testController.view = new Mildred.View();
      return testController.title = 'Test Controller Title';
    });
    afterEach(function() {
      testController.dispose();
      return layout.dispose();
    });
    it('should have el, $el and $ props / methods', function() {
      expect(layout.el).to.be(document.body);
      return expect(layout.$el).to.be.a($);
    });
    it('should set the document title', function() {
      var spy, title;
      spy = sinon.spy();
      Backbone.on('adjustTitle', spy);
      Backbone.trigger('adjustTitle', testController.title);
      title = "" + testController.title + " \u2013 " + layout.title;
      expect(document.title).to.be(title);
      return expect(spy).was.calledWith(testController.title);
    });
    it('should route clicks on internal links', function() {
      return expectWasRouted({
        href: '/internal/link'
      });
    });
    it('should correctly pass the query string', function() {
      var linkAttributes, passedPath, path, query, stub;
      path = '/internal/link';
      query = 'foo=bar&baz=qux';
      stub = sinon.spy();
      Backbone.on('router:route', stub);
      linkAttributes = {
        href: "" + path + "?" + query
      };
      createLink(linkAttributes).appendTo(document.body).click().remove();
      expect(stub).was.calledOnce();
      passedPath = stub.firstCall.args[0];
      expect(passedPath).to.eql({
        url: linkAttributes.href
      });
      return Backbone.off('!router:route', stub);
    });
    it('should not route links without href attributes', function() {
      return expectWasNotRouted({
        name: 'foo'
      });
    });
    it('should not route links with empty href', function() {
      return expectWasNotRouted({
        href: ''
      });
    });
    it('should not route links to document fragments', function() {
      return expectWasNotRouted({
        href: '#foo'
      });
    });
    it('should not route links with a noscript class', function() {
      return expectWasNotRouted({
        href: '/foo',
        "class": 'noscript'
      });
    });
    it('should not route rel=external links', function() {
      return expectWasNotRouted({
        href: '/foo',
        rel: 'external'
      });
    });
    it('should not route target=blank links', function() {
      return expectWasNotRouted({
        href: '/foo',
        target: '_blank'
      });
    });
    it('should not route non-http(s) links', function() {
      expectWasNotRouted({
        href: 'mailto:a@a.com'
      });
      expectWasNotRouted({
        href: 'javascript:1+1'
      });
      return expectWasNotRouted({
        href: 'tel:1488'
      });
    });
    it('should not route clicks on external links', function() {
      var old;
      old = window.open;
      window.open = sinon.stub();
      expectWasNotRouted({
        href: 'http://example.com/'
      });
      expectWasNotRouted({
        href: 'https://example.com/'
      });
      expect(window.open).was.notCalled();
      return window.open = old;
    });
    it('should route clicks on elements with the “go-to” class', function() {
      var $span, passedPath, path, stub;
      stub = sinon.stub();
      Backbone.on('router:route', stub);
      path = '/internal/link';
      $span = $(document.createElement('span')).addClass('go-to').attr('data-href', path).appendTo(document.body).click().remove();
      expect(stub).was.calledOnce();
      passedPath = stub.firstCall.args[0];
      expect(passedPath).to.eql({
        url: path
      });
      return Backbone.off('!router:route', stub);
    });
    it('custom isExternalLink receives link properties', function() {
      var link, stub;
      stub = sinon.stub().returns(true);
      layout.isExternalLink = stub;
      expectWasNotRouted({
        href: 'http://www.example.org:1234/foo?bar=1#baz',
        target: "_blank",
        rel: "external"
      });
      expect(stub).was.calledOnce();
      link = stub.lastCall.args[0];
      expect(link.target).to.be("_blank");
      expect(link.rel).to.be("external");
      expect(link.hash).to.be("#baz");
      expect(link.pathname.replace(/^\//, '')).to.be("foo");
      return expect(link.host).to.be("www.example.org:1234");
    });
    it('custom isExternalLink should not route if true', function() {
      layout.isExternalLink = function() {
        return true;
      };
      return expectWasNotRouted({
        href: '/foo'
      });
    });
    it('custom isExternalLink should route if false', function() {
      layout.isExternalLink = function() {
        return false;
      };
      return expectWasRouted({
        href: '/foo',
        rel: "external"
      });
    });
    it('routeLinks=false should NOT route clicks on internal links', function() {
      layout.dispose();
      layout = new Mildred.Layout({
        title: '',
        routeLinks: false
      });
      return expectWasNotRouted({
        href: '/internal/link'
      });
    });
    it('openExternalToBlank=true should open external links in a new tab', function() {
      var old;
      old = window.open;
      window.open = sinon.stub();
      layout.dispose();
      layout = new Mildred.Layout({
        title: '',
        openExternalToBlank: true
      });
      expectWasNotRouted({
        href: 'http://www.example.org/'
      });
      expect(window.open).was.called();
      window.open = sinon.stub();
      layout.dispose();
      layout = new Mildred.Layout({
        title: '',
        openExternalToBlank: true
      });
      expectWasNotRouted({
        href: '/foo',
        rel: "external"
      });
      expect(window.open).was.called();
      return window.open = old;
    });
    it('skipRouting=false should route links with a noscript class', function() {
      layout.dispose();
      layout = new Mildred.Layout({
        title: '',
        skipRouting: false
      });
      return expectWasRouted({
        href: '/foo',
        "class": 'noscript'
      });
    });
    it('skipRouting=function should decide whether to route', function() {
      var args, path, stub;
      path = '/foo';
      stub = sinon.stub().returns(false);
      layout.dispose();
      layout = new Mildred.Layout({
        title: '',
        skipRouting: stub
      });
      expectWasNotRouted({
        href: path
      });
      expect(stub).was.calledOnce();
      args = stub.lastCall.args;
      expect(args[0]).to.be(path);
      expect(args[1]).to.be.an('object');
      expect(args[1].nodeName).to.be('A');
      stub = sinon.stub().returns(true);
      layout.dispose();
      layout = new Mildred.Layout({
        title: '',
        skipRouting: stub
      });
      expectWasRouted({
        href: path
      });
      expect(stub).was.calledOnce();
      expect(args[0]).to.be(path);
      expect(args[1]).to.be.an('object');
      return expect(args[1].nodeName).to.be('A');
    });
    it('should dispose itself correctly', function() {
      var spy1, spy2;
      spy1 = sinon.spy();
      layout.on('foo', spy1);
      spy2 = sinon.spy();
      layout.delegateEvents({
        'click #testbed': spy2
      });
      expect(layout.dispose).to.be.a('function');
      layout.dispose();
      expect(layout.disposed).to.be(true);
      if (Object.isFrozen) {
        expect(Object.isFrozen(layout)).to.be(true);
      }
      layout.trigger('foo');
      $('#testbed').click();
      expect(spy1).was.notCalled();
      return expect(spy2).was.notCalled();
    });
    return it('should be extendable', function() {
      var DerivedLayout, derivedLayout;
      expect(Mildred.Layout.extend).to.be.a('function');
      DerivedLayout = Mildred.Layout.extend();
      derivedLayout = new DerivedLayout();
      expect(derivedLayout).to.be.a(Mildred.Layout);
      return derivedLayout.dispose();
    });
  });

}).call(this);
