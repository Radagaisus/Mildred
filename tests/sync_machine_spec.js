// Generated by CoffeeScript 1.4.0
(function() {

  describe('SyncMachine', function() {
    var machine;
    machine = null;
    beforeEach(function() {
      machine = {};
      _.extend(machine, Backbone.Events);
      return _.extend(machine, Mildred.SyncMachine);
    });
    it('should change its state', function() {
      expect(machine.syncState()).to.be('unsynced');
      machine.beginSync();
      expect(machine.syncState()).to.be('syncing');
      machine.finishSync();
      expect(machine.syncState()).to.be('synced');
      machine.unsync();
      return expect(machine.syncState()).to.be('unsynced');
    });
    it('should emit sync events', function() {
      var stateChange, synced, syncing, unsynced;
      stateChange = sinon.spy();
      syncing = sinon.spy();
      synced = sinon.spy();
      unsynced = sinon.spy();
      machine.on('syncStateChange', stateChange);
      machine.on('syncing', syncing);
      machine.on('synced', synced);
      machine.on('unsynced', unsynced);
      machine.beginSync();
      expect(stateChange).was.calledOnce();
      expect(stateChange).was.calledWith(machine, 'syncing');
      expect(syncing).was.calledOnce();
      machine.finishSync();
      expect(stateChange).was.calledTwice();
      expect(stateChange).was.calledWith(machine, 'synced');
      return expect(synced).was.calledOnce();
    });
    it('should has shortcuts for checking sync state', function() {
      expect(machine.isUnsynced()).to.be(true);
      expect(machine.isSyncing()).to.be(false);
      expect(machine.isSynced()).to.be(false);
      machine.beginSync();
      expect(machine.isUnsynced()).to.be(false);
      expect(machine.isSyncing()).to.be(true);
      expect(machine.isSynced()).to.be(false);
      machine.finishSync();
      expect(machine.isUnsynced()).to.be(false);
      expect(machine.isSyncing()).to.be(false);
      return expect(machine.isSynced()).to.be(true);
    });
    it('should be able to abort sync', function() {
      machine.beginSync();
      machine.abortSync();
      return expect(machine.syncState()).to.be('unsynced');
    });
    return it('should has sync callbacks', function() {
      var synced, syncing, unsynced;
      syncing = sinon.spy();
      synced = sinon.spy();
      unsynced = sinon.spy();
      machine.syncing(syncing);
      machine.synced(synced);
      machine.unsynced(unsynced);
      machine.beginSync();
      expect(syncing).was.calledOnce();
      machine.finishSync();
      expect(synced).was.calledOnce();
      machine.unsync();
      return expect(unsynced).was.calledTwice();
    });
  });

}).call(this);
